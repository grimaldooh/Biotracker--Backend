spring.application.name=backend

# Base de datos local PostgreSQL
# spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/biotrack_db}
# spring.datasource.username=${DB_USERNAME:tu_usuario}
# spring.datasource.password=${DB_PASSWORD:tu_password}

# # JPA (Hibernate)
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true

# # Charset y timezone
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.datasource.hikari.connection-timeout=20000
# spring.datasource.hikari.maximum-pool-size=10
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Lombok (si usas IDE con soporte)
spring.devtools.restart.enabled=true

# AWS Configuration - Variables de entorno
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME:biotrack-result-files}
aws.region=${AWS_REGION:us-east-2}
aws.access-key=${AWS_ACCESS_KEY}
aws.secret-key=${AWS_SECRET_KEY}
aws.sns.enabled=true
aws.accessKeyId=${AWS_ACCESS_KEY_ID}
aws.secretKey=${AWS_SECRET_ACCESS_KEY}

# Debug para diagnosticar problema de Swagger
logging.level.org.springdoc=DEBUG
logging.level.io.swagger=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.mail=DEBUG
logging.level.com.biotrack.backend.config=DEBUG

# OpenAI Configuration
openai.api.key=${OPENAI_API_KEY}
openai.api.url=https://api.openai.com/v1/chat/completions
openai.model=gpt-4.1-mini
openai.max-tokens=4096
openai.temperature=0.3

# Database Configuration - Local PostgreSQL
# spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/biotracker}
# spring.datasource.username=${DB_USERNAME:postgres}
# spring.datasource.password=${DB_PASSWORD:12345}
# spring.datasource.driver-class-name=org.postgresql.Driver

# JWT Configuration
app.jwt.secret=MyVerySecureJWTSecretKeyForHS512AlgorithmThatIsAtLeast64CharactersLongAndSecure123456789
app.jwt.expiration=86400000

# Database Configuration - AWS RDS
spring.datasource.url=jdbc:postgresql://${AWS_RDS_ENDPOINT}:5432/${AWS_RDS_DATABASE}
spring.datasource.username=${AWS_RDS_USERNAME}
spring.datasource.password=${AWS_RDS_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# # Connection Pool optimized for AWS RDS
# spring.datasource.hikari.maximum-pool-size=10
# spring.datasource.hikari.minimum-idle=2
# spring.datasource.hikari.idle-timeout=300000
# spring.datasource.hikari.connection-timeout=20000
# spring.datasource.hikari.max-lifetime=1200000
# spring.datasource.hikari.leak-detection-threshold=60000

# Connection Pool optimized for local development
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.leak-detection-threshold=60000

# AWS RDS specific optimizations
spring.datasource.hikari.connection-init-sql=SELECT 1
spring.datasource.hikari.data-source-properties.tcpKeepAlive=true
spring.datasource.hikari.data-source-properties.socketTimeout=30

# Email Configuration
smtp.host=${SMTP_HOST}
smtp.port=${SMTP_PORT}
smtp.user=${SMTP_USER}
smtp.pass=${SMTP_PASS}
email.from=${EMAIL_FROM}
email.from.name=${EMAIL_FROM_NAME}
notification.email=${NOTIFICATION_EMAIL}

aws.lambda.function.insurance-calculator=${AWS_LAMBDA_INSURANCE_FUNCTION:insurance-calculator}
aws.lambda.region=${AWS_REGION:us-east-2}
aws.lambda.timeout=30000